{"version":3,"sources":["router/routes.ts","store/hooks.ts","pages/Profile/Profile.tsx","components/common/InputText/InputText.tsx","components/common/Button/Button.tsx","components/common/Checkbox/Checkbox.tsx","API/commonAPIData.ts","API/login.ts","API/appApi.ts","App/AppReducer.ts","pages/Login/loginReducer.ts","pages/Login/Login.tsx","API/registration.ts","pages/Registration/registrationReducer.ts","pages/Registration/Registration.tsx","API/passwordRecover.ts","pages/PasswordRecover/passwordRecoverReducer.ts","pages/PasswordRecover/PasswordRecoverForm.tsx","components/layout/FormContainer.tsx","components/common/Loader/Loader.tsx","pages/PasswordRecover/PasswordRecover.tsx","pages/NewPassword/NewPassword.tsx","components/layout/Container.tsx","pages/PresenatationPage/PresentationPage.tsx","pages/404/404.tsx","components/Main/Main.tsx","components/Header/Header.tsx","components/Navigation/Navigation.tsx","App/App.tsx","reportWebVitals.ts","pages/NewPassword/newPasswordReducer.ts","pages/Profile/profileReducer.ts","store/store.tsx","styles/theme.ts","styles/GlobalStyles.ts","index.tsx"],"names":["routes","useAppDispatch","useDispatch","useAppSelector","useSelector","Profile","state","login","isLoggedIn","to","InputText","type","onChange","onChangeText","onKeyPress","onEnter","error","restProps","InputTextWrapper","StyledInput","e","currentTarget","value","key","StyledError","styled","div","input","theme","font","size","default","family","s1","Button","StyledButton","button","color","primary","main","white","light","Checkbox","props","children","StyledLabel","label","grey","shadow","instance","axios","create","baseURL","withCredentials","loginApi","loginData","post","delete","appAPI","authMe","createAsyncThunk","_","thunkAPI","a","res","userData","data","rejectWithValue","response","appSlice","createSlice","name","initialState","reducers","appReducer","reducer","actions","formVal","errorMessage","logout","info","loginSlice","isFormPending","loginError","extraReducers","builder","addCase","fulfilled","action","console","log","payload","rejected","pending","loginReducer","Login","dispatch","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","length","test","onSubmit","inputValidation","fieldType","touched","FormStyle","handleSubmit","Overlay","id","handleChange","onBlur","handleBlur","placeholder","checked","form","regestrationApi","registrationData","register","registrationSlice","isRegistred","isPending","registrationError","registrationReducer","Registration","registration","confirmPassword","StyledForm","passRecoverApi","from","message","recover","formValues","ThunkAPI","responseData","passwordRecoverSlice","responseMessage","passwordRecoverReducer","PasswordRecoverForm","getFieldProps","FormContainer","Loader","LoaderContainer","Card","animate","keyframes","PasswordRecover","passwordRecover","NewPassword","Container","PresentationPage","StyledContainer","CardsWrapper","PresentationCard","NotFound","MainContentWrap","Main","exact","path","render","Header","onLogOutBtnClick","HeaderWrap","onClick","Navigation","NavigationWrap","LinksList","App","useEffect","MainWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","newPassSlice","newPasswordReducer","profileSlice","profileReducer","rootReducer","combineReducers","app","newPassword","profile","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","primaryColor","secondaryColor","variable","headerHeight","lighten","dark","darken","secondary","100","200","300","400","500","600","700","800","900","black","source","montserrat","s3","s2","b1","b2","b3","b4","b5","0","1","2","3","effect","glow","mediaQuery","mobileS","mobileM","mobileL","tablet","laptop","laptopL","fourK","GlobalStyles","createGlobalStyle","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.341b8c2b.chunk.js","sourcesContent":["export const routes = {\r\n    profile: \"/\",\r\n    login: \"/login\",\r\n    registration: \"/registration\",\r\n    notFound: \"/404\",\r\n    passwordRecover: \"/recover\",\r\n    newPassword: \"/newPassword\",\r\n    presentation: \"/presentation\"\r\n};\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { AppRootStateT, AppDispatchT } from \"./store\";\r\n\r\n// * Use throughout your app instead of plain `useDispatch` and `useSelector`\r\n// * https://redux-toolkit.js.org/tutorials/typescript#define-typed-hooks\r\nexport const useAppDispatch = () => useDispatch<AppDispatchT>();\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateT> = useSelector;\r\n","import React from \"react\";\r\nimport { useAppSelector } from \"../../store/hooks\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { routes } from \"../../router/routes\";\r\n\r\nexport const Profile = () => {\r\n    const isLoggedIn = useAppSelector((state) => state.login.isLoggedIn);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={routes.login} />;\r\n    }\r\n    return (\r\n        <>\r\n            <h1>Profile</h1>\r\n        </>\r\n    );\r\n};\r\n","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent } from \"react\";\r\nimport styled, { StyledComponentProps } from \"styled-components/macro\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void;\r\n    onEnter?: () => void;\r\n    error?: string;\r\n};\r\n\r\nexport const InputText: React.FC<SuperInputTextPropsType> = ({\r\n    type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n    onChange,\r\n    onChangeText,\r\n    onKeyPress,\r\n    onEnter,\r\n    error,\r\n\r\n    ...restProps // все остальные пропсы попадут в объект restProps\r\n}) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && // если есть пропс onChange\r\n            onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" && // если нажата кнопка Enter\r\n            onEnter && // и есть пропс onEnter\r\n            onEnter(); // то вызвать его\r\n    };\r\n\r\n    return (\r\n        <InputTextWrapper>\r\n            <StyledInput\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            <StyledError>{error && <span>{error}</span>}</StyledError>\r\n        </InputTextWrapper>\r\n    );\r\n};\r\n\r\nconst InputTextWrapper = styled.div`\r\n    position: relative;\r\n\r\n    width: 100%;\r\n`;\r\n\r\nconst StyledInput = styled.input<StyledComponentProps<any, any, any, any>>`\r\n    // Общие стили инпута\r\n\r\n    padding: 1rem 0.5rem;\r\n    margin-bottom: 20px;\r\n\r\n    height: 20px;\r\n    width: 100%;\r\n\r\n    font-size: ${({ theme }) => theme.font.size.default};\r\n    font-family: ${({ theme }) => theme.font.family.default};\r\n\r\n    border: 1px solid rgb(109, 109, 109);\r\n`;\r\n// Стили контейнера с ошибкой\r\nconst StyledError = styled.div`\r\n    position: absolute;\r\n    bottom: 1px;\r\n\r\n    // Стили текста ошибки\r\n    & > span {\r\n        font-size: ${({ theme }) => theme.font.size.s1};\r\n        color: red;\r\n    }\r\n`;\r\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\r\nimport styled, { StyledComponentProps } from \"styled-components/macro\";\r\nimport { ThemeType } from \"../../../styles/theme\";\r\n\r\n// тип пропсов обычной кнопки\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype PropsType = DefaultButtonPropsType;\r\n\r\nexport const Button: React.FC<PropsType> = ({ ...restProps }) => {\r\n    return <StyledButton {...restProps} />;\r\n};\r\n\r\n// Styles\r\nconst StyledButton = styled.button<StyledComponentProps<any, ThemeType, any, any>>`\r\n  border: none;\r\n  cursor: pointer;\r\n  background-color: ${({ theme }) => theme.color.primary.main};\r\n  color: ${({ theme }) => theme.color.white};\r\n  padding: 0.5rem 1rem;\r\n\r\n  font-family: ${({ theme }) => theme.font.family.default}; // Make a default font actually default\r\n  font-size: ${({ theme }) => theme.font.size.default}; // Default font size\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.color.primary.light};\r\n  }\r\n`;\r\n","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes } from \"react\";\r\nimport styled from \"styled-components/macro\";\r\n\r\nexport const Checkbox: React.FC<PropsType> = (props) => {\r\n    const { type, onChange, children, ...restProps } = props;\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange(e);\r\n    };\r\n\r\n    return (\r\n        <StyledLabel>\r\n            <input type={\"checkbox\"} onChange={onChangeCallback} {...restProps} />\r\n            <span>{children}</span>\r\n        </StyledLabel>\r\n    );\r\n};\r\n\r\n// Styles\r\nconst StyledLabel = styled.label<any>`\r\n    // Общие стили чекбокса\r\n    cursor: pointer;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    // Стили для элемента input c type=\"checkbox\". Тут убираеться дефолтный чекбокс\r\n    & > input {\r\n        position: absolute;\r\n        z-index: -1;\r\n        opacity: 0;\r\n    }\r\n\r\n    // Стили для текста чекбокса\r\n    & > span {\r\n        display: inline-flex;\r\n        align-items: center;\r\n        user-select: none;\r\n    }\r\n\r\n    // Стили коробки (кнопки) чекбокса\r\n    & > span::before {\r\n        content: \"\";\r\n        display: inline-block;\r\n        width: 16px;\r\n        height: 16px;\r\n        flex-shrink: 0;\r\n        flex-grow: 0;\r\n        border: 1px solid ${({ theme }) => theme.color.grey[\"500\"]};\r\n        margin-right: 0.5em;\r\n        background-repeat: no-repeat;\r\n        background-position: center center;\r\n        background-size: 50% 50%;\r\n    }\r\n\r\n    // стили при наведении курсора на checkbox\r\n    & > input:not(:disabled):not(:checked) + span:hover::before {\r\n        border-color: ${({ theme }) => theme.color.grey[\"500\"]}; // 183\r\n    }\r\n\r\n    // стили для активного чекбокса (при нажатии на него)\r\n    & > input:not(:disabled):active + span::before {\r\n        background-color: ${({ theme }) => theme.color.grey[\"500\"]};\r\n        border-color: ${({ theme }) => theme.color.grey[\"700\"]};\r\n    }\r\n\r\n    // стили для чекбокса, находящегося в фокусе\r\n    & > input:focus + span::before {\r\n        box-shadow: ${({ theme }) => theme.shadow[\"0\"]};\r\n    }\r\n\r\n    // стили для чекбокса, находящегося в фокусе и не находящегося в состоянии checked\r\n    & > input:focus:not(:checked) + span::before {\r\n        border-color: ${({ theme }) => theme.color.grey[\"700\"]};\r\n    }\r\n\r\n    // стили для чекбокса, находящегося в состоянии checked\r\n    & > input:checked + span::before {\r\n        border-color: ${({ theme }) => theme.color.primary.main};\r\n        background-color: ${({ theme }) => theme.color.primary.main};\r\n        background-size: 65% 65%;\r\n        background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3e%3c/svg%3e\");\r\n    }\r\n\r\n    // стили для чекбокса, находящегося в состоянии disabled\r\n    & > input:disabled + span::before {\r\n        background-color: ${({ theme }) => theme.color.grey[\"700\"]};\r\n    }\r\n`;\r\n\r\n// Types\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype PropsType = DefaultInputPropsType & {\r\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n    children: string; // Checkbox text\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'http://localhost:7542/2.0/',\r\n    withCredentials: true\r\n})","import { instance } from \"./commonAPIData\";\r\nimport { LoginFormT } from \"../pages/Login/Login\";\r\n\r\nexport const loginApi = {\r\n    async login(loginData: LoginFormT) {\r\n        return await instance.post(\"auth/login\", loginData);\r\n    },\r\n    async logout() {\r\n        return await instance.delete(\"auth/me\");\r\n    }\r\n};\r\n","import { instance } from \"./commonAPIData\";\r\n\r\nexport const appAPI = {\r\n    async me() {\r\n        return await instance.post(\"auth/me\");\r\n    }\r\n};","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { appAPI } from \"../API/appApi\";\r\nimport { UserDataT } from \"../pages/Login/loginReducer\";\r\n\r\nexport type InitialStateT = any;\r\n\r\n//* Thunks\r\nexport const authMe = createAsyncThunk<{ userData: UserDataT }, void, { rejectValue: string }>(\r\n    \"app/me\",\r\n    async (_, thunkAPI) => {\r\n        try {\r\n            const res = await appAPI.me();\r\n            return { userData: res.data };\r\n        } catch (err) {\r\n            return thunkAPI.rejectWithValue(err.response.data.error);\r\n        }\r\n    }\r\n);\r\n\r\nexport const initialState: InitialStateT = {};\r\n\r\nconst appSlice = createSlice({\r\n    name: \"app\",\r\n    initialState,\r\n    reducers: {}\r\n});\r\n\r\nexport const appReducer = appSlice.reducer;\r\n\r\n// * Actions\r\nexport const {} = appSlice.actions;\r\n\r\n// * Thunks\r\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { LoginFormT } from \"./Login\";\r\nimport { loginApi } from \"../../API/login\";\r\nimport { authMe } from \"../../App/AppReducer\";\r\n\r\nexport type InitialStateT = {\r\n    isLoggedIn: boolean;\r\n    isFormPending: boolean;\r\n    loginError?: string;\r\n};\r\n\r\nexport type UserDataT = {\r\n    created: string;\r\n    email: string;\r\n    isAdmin: boolean;\r\n    name: string;\r\n    publicCardPacksCount: number;\r\n    rememberMe: boolean;\r\n    token: string;\r\n    tokenDeathTime: number;\r\n    updated: string;\r\n    verified: boolean;\r\n};\r\n\r\n// * Thunks\r\n\r\nexport const login = createAsyncThunk<{ userData: UserDataT }, LoginFormT, { rejectValue: { errorMessage: string } }>(\r\n    \"login/login\",\r\n    async (formVal: LoginFormT, thunkAPI) => {\r\n        const { rejectWithValue } = thunkAPI;\r\n        try {\r\n            const res = await loginApi.login(formVal);\r\n            return { userData: res.data };\r\n        } catch (err) {\r\n            return rejectWithValue({ errorMessage: err.response.data.error });\r\n        }\r\n    }\r\n);\r\nexport const logout = createAsyncThunk<string, void, { rejectValue: string }>(\"login/logout\", async (_, thunkAPI) => {\r\n    try {\r\n        const res = await loginApi.logout();\r\n        return res.data.info;\r\n    } catch (err) {\r\n        return thunkAPI.rejectWithValue(err.response.data.error);\r\n    }\r\n});\r\n\r\nexport const initialState: InitialStateT = {\r\n    isLoggedIn: false,\r\n    isFormPending: false,\r\n    loginError: \"\"\r\n};\r\n\r\nconst loginSlice = createSlice({\r\n    name: \"login\",\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(login.fulfilled, (state, action) => {\r\n            state.isLoggedIn = true;\r\n            state.isFormPending = false;\r\n            state.loginError = \"\";\r\n            //* user data for future using\r\n            console.log(\"If loggedin userdata\", action.payload);\r\n        });\r\n        builder.addCase(login.rejected, (state, action) => {\r\n            state.isLoggedIn = false;\r\n            state.isFormPending = false;\r\n            state.loginError = action.payload?.errorMessage;\r\n        });\r\n        builder.addCase(login.pending, (state) => {\r\n            state.isFormPending = true;\r\n        });\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n            state.isLoggedIn = false;\r\n        });\r\n        builder.addCase(logout.rejected, (state) => {\r\n            //TODO: Не понятно как обрабатывать этот catch так как пользователь если залогинен, кнопка скрыта\r\n            state.isFormPending = false;\r\n        });\r\n        builder.addCase(authMe.fulfilled, (state, action) => {\r\n            //* user data for future using\r\n            console.log(\"If auth user data: \", action.payload)\r\n            state.isLoggedIn = true;\r\n        });\r\n        builder.addCase(authMe.rejected, (state, action) => {\r\n            state.isLoggedIn = false;\r\n        });\r\n    }\r\n});\r\n\r\nexport const loginReducer = loginSlice.reducer;\r\n\r\n// * Action creators\r\n\r\nexport const {} = loginSlice.actions;\r\n\r\n\r\n","import React from \"react\";\r\nimport { InputText } from \"../../components/common/InputText/InputText\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { routes } from \"../../router/routes\";\r\nimport { Button } from \"../../components/common/Button/Button\";\r\nimport { Checkbox } from \"../../components/common/Checkbox/Checkbox\";\r\nimport styled from \"styled-components/macro\";\r\nimport { useFormik } from \"formik\";\r\nimport { useAppDispatch, useAppSelector } from \"../../store/hooks\";\r\nimport { login } from \"./loginReducer\";\r\n// yehorTest@gmail.com\r\nexport type LoginFormT = {\r\n    email: string;\r\n    password: string;\r\n};\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useAppSelector((state) => state.login.isLoggedIn);\r\n    const loginError = useAppSelector((state) => state.login.loginError);\r\n    const isFormPending = useAppSelector((state) => state.login.isFormPending);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const validate = (values: LoginFormT) => {\r\n        const errors: LoginFormT = {} as LoginFormT;\r\n        if (!values.password) {\r\n            errors.password = \"Required\";\r\n        } else if (values.password.length < 5) {\r\n            errors.password = \"Must be 5 characters or more\";\r\n        }\r\n\r\n        if (!values.email) {\r\n            errors.email = \"Required\";\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = \"Invalid email address\";\r\n        } else if (values.email.length > 50) {\r\n            errors.email = \"Your email is too long :-(\";\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: (values) => {\r\n            dispatch(login(values));\r\n        }\r\n    });\r\n\r\n    const inputValidation = (fieldType: \"password\" | \"email\"): string => {\r\n        return formik.touched[fieldType] && formik.errors[fieldType] ? `${formik.errors[fieldType]}` : \"\";\r\n    };\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={routes.profile} />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <FormStyle onSubmit={formik.handleSubmit}>\r\n                    {isFormPending && (\r\n                        <Overlay>\r\n                            <span>Loading...</span>\r\n                        </Overlay>\r\n                    )}\r\n                    <span>Sing in</span>\r\n\r\n                    <InputText\r\n                        type={\"email\"}\r\n                        value={formik.values.email}\r\n                        id={\"email\"}\r\n                        name={\"email\"}\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        placeholder={\"Email\"}\r\n                        error={inputValidation(\"email\")}\r\n                    />\r\n                    <InputText\r\n                        type={\"password\"}\r\n                        value={formik.values.password}\r\n                        name={\"password\"}\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        placeholder={\"Password\"}\r\n                        error={inputValidation(\"password\")}\r\n                    />\r\n\r\n                    <NavLink to={routes.passwordRecover}>Forgot password?</NavLink>\r\n                    <Checkbox checked={formik.values.rememberMe} onChange={formik.handleChange} name={\"rememberMe\"}>\r\n                        Remember me\r\n                    </Checkbox>\r\n                    <Button type={\"submit\"}>Sing in</Button>\r\n                    <NavLink to={routes.registration}>Registration</NavLink>\r\n                </FormStyle>\r\n                {loginError && <div>{loginError}</div>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst FormStyle = styled.form`\r\n    margin: 0 auto;\r\n    padding: 10px 15px;\r\n    width: 50%;\r\n    min-width: 300px;\r\n\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-flow: column nowrap;\r\n\r\n    border: 1px solid red;\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: #267fd457;\r\n    backdrop-filter: blur(5px);\r\n    z-index: 10;\r\n\r\n    & > span {\r\n        position: absolute;\r\n        left: 50%;\r\n        top: 50%;\r\n        transform: translate(-50%, -100%);\r\n    }\r\n`;\r\n","import { RegistrationFormT } from './../pages/Registration/Registration';\r\nimport { instance } from './commonAPIData';\r\n\r\n\r\nexport const regestrationApi = {\r\n    async register(registrationData:RegistrationFormT){\r\n        return await instance.post(\"auth/register\", {email: registrationData.email, password:registrationData.password})\r\n    }\r\n};\r\n\r\n","\r\nimport { RegistrationFormT } from './Registration';\r\n\r\nimport { regestrationApi } from './../../API/registration';\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { UserDataT } from '../Login/loginReducer';\r\n\r\nexport type InitialStateT = {\r\n    isRegistred: boolean\r\n    isPending: boolean\r\n    registrationError: string | undefined\r\n};\r\n\r\nexport const initialState: InitialStateT = {\r\n    isRegistred: false,\r\n    isPending: false,\r\n    registrationError: ''\r\n};\r\n\r\n\r\nexport const register = createAsyncThunk<{ userData: UserDataT }, RegistrationFormT, { rejectValue: { errorMessage: string } }>('registration/register', async (formVal: RegistrationFormT, thunkAPI) => {\r\n    const { rejectWithValue } = thunkAPI;\r\n    try {\r\n        const res = await regestrationApi.register(formVal);\r\n        return { userData: res.data };\r\n    } catch (err) {\r\n        return rejectWithValue({ errorMessage: err.response.data.error });\r\n    }\r\n})\r\nconst registrationSlice = createSlice({\r\n    name: \"registration\",\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(register.fulfilled, (state) => {\r\n            state.isRegistred = true\r\n            state.isPending = false;\r\n            state.registrationError = \"\";\r\n\r\n        });\r\n        builder.addCase(register.rejected, (state, action) => {\r\n            state.isRegistred = false\r\n            state.isPending = false;\r\n            state.registrationError = action.payload?.errorMessage;\r\n        });\r\n        builder.addCase(register.pending, (state) => {\r\n            state.isPending = true;\r\n        });\r\n    }\r\n});\r\nexport const registrationReducer = registrationSlice.reducer;\r\n\r\nexport const { } = registrationSlice.actions;\r\n\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { routes } from \"../../router/routes\";\r\nimport { useAppDispatch, useAppSelector } from \"../../store/hooks\";\r\nimport { Button } from \"../../components/common/Button/Button\";\r\nimport styled from \"styled-components\";\r\nimport { InputText } from \"../../components/common/InputText/InputText\";\r\nimport { register } from \"./registrationReducer\";\r\nexport type RegistrationFormT = {\r\n    email: string;\r\n    password: string | undefined;\r\n    confirmPassword: string;\r\n};\r\n\r\nexport const Registration = () => {\r\n    const isRegistred = useAppSelector((state) => state.registration.isRegistred);\r\n    const registrationError = useAppSelector((state) => state.registration.registrationError);\r\n    const isPending = useAppSelector((state) => state.registration.isPending);\r\n    const dispatch = useAppDispatch();\r\n    const validate = (values: RegistrationFormT) => {\r\n        const errors: RegistrationFormT = {} as RegistrationFormT;\r\n        if (!values.password) {\r\n            errors.password = \"password required\";\r\n        } else if (values.password.length < 5) {\r\n            errors.password = \"Must be more than 5 characters\";\r\n        } else if (!values.confirmPassword) {\r\n            errors.confirmPassword = \"confirm your password\";\r\n        } else if (values.password !== values.confirmPassword) {\r\n            errors.confirmPassword = \"The password and confirm password fields do not match\";\r\n        }\r\n        if (!values.email) {\r\n            errors.email = \"email required\";\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = \"Invalid email address\";\r\n        } else if (values.email.length > 50) {\r\n            errors.email = \"email is too long\";\r\n        }\r\n\r\n        return errors;\r\n    };\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\"\r\n        },\r\n        validate,\r\n        onSubmit: (values) => {\r\n            dispatch(register(values));\r\n            // console.log(values);\r\n        }\r\n    });\r\n    const inputValidation = (fieldType: \"password\" | \"email\" | \"confirmPassword\"): string => {\r\n        return formik.touched[fieldType] && formik.errors[fieldType] ? `${formik.errors[fieldType]}` : \"\";\r\n    };\r\n    if (isRegistred) {\r\n        return <Redirect to={\"/login\"} />;\r\n    }\r\n    return (\r\n        <>\r\n            <>\r\n                <div>\r\n                    <StyledForm onSubmit={formik.handleSubmit}>\r\n                        {isPending && (\r\n                            <Overlay>\r\n                                <span>Loading...</span>\r\n                            </Overlay>\r\n                        )}\r\n                        <span>Sing up</span>\r\n\r\n                        <InputText\r\n                            type={\"email\"}\r\n                            value={formik.values.email}\r\n                            id={\"email\"}\r\n                            name={\"email\"}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            placeholder={\"Email\"}\r\n                            error={inputValidation(\"email\")}\r\n                        />\r\n                        <InputText\r\n                            type={\"password\"}\r\n                            value={formik.values.password}\r\n                            name={\"password\"}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            placeholder={\"Password\"}\r\n                            error={inputValidation(\"password\")}\r\n                        />\r\n                        <InputText\r\n                            type={\"password\"}\r\n                            value={formik.values.confirmPassword}\r\n                            name={\"confirmPassword\"}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            placeholder={\"confirm password\"}\r\n                            error={inputValidation(\"confirmPassword\")}\r\n                        />\r\n\r\n                        {registrationError && <div>{registrationError}</div>}\r\n                        <Button type={\"submit\"}>Sing up</Button>\r\n                        <NavLink to={routes.login}>Login</NavLink>\r\n                    </StyledForm>\r\n                </div>\r\n            </>\r\n        </>\r\n    );\r\n};\r\n\r\nconst StyledForm = styled.form`\r\n    margin: 0 auto;\r\n    padding: 10px 15px;\r\n    width: 50%;\r\n    min-width: 300px;\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-flow: column nowrap;\r\n    border: 1px solid red;\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: #267fd457;\r\n    backdrop-filter: blur(5px);\r\n    z-index: 10;\r\n    & > span {\r\n        position: absolute;\r\n        left: 50%;\r\n        top: 50%;\r\n        transform: translate(-50%, -100%);\r\n    }\r\n`;\r\n","import { instance } from \"./commonAPIData\";\r\n\r\nconst from = 'developer@gmail.com'\r\nconst message = `<div>password recover link: <a href='http://localhost:3000/#/set-new-password/$token$'></a></div>`\r\n\r\nexport const passRecoverApi = {\r\n    async recover(email: { email: string }) {\r\n        return await instance.post('auth/forgot', {...email, from, message})\r\n    }\r\n};\r\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { FormValueT } from \"./PasswordRecoverForm\";\r\nimport { passRecoverApi } from \"../../API/passwordRecover\";\r\n\r\nexport type InitialStateT = {\r\n    isFormPending: boolean\r\n    responseMessage?: string\r\n};\r\n\r\nexport const initialState: InitialStateT = {\r\n    isFormPending: false,\r\n    responseMessage: '',\r\n};\r\n\r\n// * Thunks Creators\r\nexport const recover = createAsyncThunk<{ responseData: RecoverResponseT}, FormValueT, {rejectValue: {errorMessage: string}}>(\r\n    'passwordRecover/recover',\r\n    async (formValues: FormValueT, ThunkAPI) => {\r\n        const { rejectWithValue } = ThunkAPI;\r\n        try {\r\n            const res = await passRecoverApi.recover(formValues)\r\n            console.log(res.data)\r\n            return { responseData: res.data }\r\n        } catch (error) {\r\n            console.log(error.response.data.error)\r\n            return rejectWithValue({ errorMessage: error.response.data.error });\r\n        }\r\n    }\r\n);\r\n\r\nconst passwordRecoverSlice = createSlice({\r\n    name: \"passwordRecover\",\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(recover.fulfilled, (state, action) => {\r\n            state.isFormPending = false\r\n            state.responseMessage = action.payload.responseData.info\r\n        });\r\n        builder.addCase(recover.rejected, (state, action) => {\r\n            state.isFormPending = false\r\n            state.responseMessage = action.payload?.errorMessage\r\n        })\r\n        builder.addCase(recover.pending, (state) => {\r\n            state.isFormPending = true\r\n        })\r\n    }\r\n});\r\n\r\nexport const passwordRecoverReducer = passwordRecoverSlice.reducer;\r\n\r\n// * Action creators\r\nexport const {} = passwordRecoverSlice.actions;\r\n\r\ntype RecoverResponseT = {\r\n    info: string\r\n    error: string\r\n}\r\n","import { InputText } from \"../../components/common/InputText/InputText\";\r\nimport { Button } from \"../../components/common/Button/Button\";\r\nimport React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport styled from \"styled-components/macro\";\r\nimport { useAppDispatch } from \"../../store/hooks\";\r\nimport { recover } from \"./passwordRecoverReducer\";\r\n\r\nexport const PasswordRecoverForm: React.FC = () => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const formik = useFormik({\r\n\r\n        validate: (values: FormValueT) => {\r\n            const errors: FormValueT = {} as FormValueT;\r\n            if (!values.email) {\r\n                errors.email = \"Email is required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors;\r\n        },\r\n        initialValues: {\r\n            email: \"\"\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(recover(values));\r\n        }\r\n    });\r\n\r\n    return (\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n\r\n            <InputText placeholder={\"Email\"} error={formik.errors.email} {...formik.getFieldProps(\"email\")} />\r\n\r\n            <Button type=\"submit\">Recover</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\n// Styles\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;\r\n\r\n// Types\r\nexport type FormValueT = {\r\n    email: string\r\n}","import styled from \"styled-components/macro\";\r\n\r\nexport const FormContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  \r\n  height: 80%;\r\n  \r\n  align-self: center;\r\n  \r\n  &:only-child {\r\n    width: 50%;\r\n  }\r\n`","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components/macro\";\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <LoaderContainer>\r\n            <Card/>\r\n        </LoaderContainer>\r\n    );\r\n};\r\n\r\n// Styles\r\nconst animate = keyframes`\r\n  50% {\r\n    transform: rotateY(0);\r\n  }\r\n  100% {\r\n    transform: rotateY(180deg);\r\n  }\r\n`;\r\n\r\nconst LoaderContainer = styled.div`\r\n  perspective: 300px;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  margin: auto;\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  width: 100px;\r\n  height: 150px;\r\n  border-radius: 10px;\r\n  background: ${({theme}) => theme.color.primary.main};\r\n  animation: ${animate} 1.5s infinite;\r\n  box-shadow: ${({theme}) => theme.shadow[\"2\"]};\r\n`;","import React from \"react\";\r\nimport { PasswordRecoverForm } from \"./PasswordRecoverForm\";\r\nimport { FormContainer } from \"../../components/layout/FormContainer\";\r\nimport { Loader } from \"../../components/common/Loader/Loader\";\r\nimport { useAppSelector } from \"../../store/hooks\";\r\n\r\nexport const PasswordRecover = () => {\r\n\r\n    const isFormPending = useAppSelector((state) => state.passwordRecover.isFormPending);\r\n    const responseMessage = useAppSelector((state) => state.passwordRecover.responseMessage)\r\n\r\n    return (\r\n        <>\r\n            <h1>Password Recover</h1>\r\n\r\n            <FormContainer>\r\n                {isFormPending ? <Loader/> : <PasswordRecoverForm/>}\r\n            </FormContainer>\r\n            <div>{responseMessage}</div>\r\n\r\n        </>\r\n    );\r\n};","import React from \"react\";\r\n\r\nexport const NewPassword = (props: any) => {\r\n    return (\r\n        <>\r\n            <h1>New Password</h1>\r\n        </>\r\n    );\r\n};\r\n","import styled from \"styled-components/macro\";\r\n\r\nexport const Container = styled.div`\r\n  padding: 0 60px;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n`","import React from \"react\";\r\nimport { Container } from \"../../components/layout/Container\";\r\nimport { Loader } from \"../../components/common/Loader/Loader\";\r\nimport styled from \"styled-components/macro\";\r\n\r\nexport const PresentationPage = (props: any) => {\r\n    return (\r\n        <>\r\n            <StyledContainer>\r\n                <CardsWrapper>\r\n                    <PresentationCard>\r\n                        <Loader/>\r\n                    </PresentationCard>\r\n                </CardsWrapper>\r\n            </StyledContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nconst StyledContainer = styled(Container)`\r\n  margin-left: -30px;\r\n`\r\n\r\nconst CardsWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nexport const PresentationCard = styled.div`\r\n  position: relative;\r\n  \r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex: 1 0 300px;\r\n\r\n  margin: 0 0 30px 30px;\r\n  padding: 30px;\r\n  height: 300px;\r\n\r\n  background-color: ${({theme}) => theme.color.white};\r\n  \r\n  border: 1px solid ${({theme}) => theme.color.grey[\"100\"]};\r\n  box-shadow: ${({theme}) => theme.shadow[\"1\"]};\r\n  border-radius: 10px;\r\n`\r\n","import React from \"react\";\r\n\r\nexport const NotFound = (props: any) => {\r\n    return (\r\n        <>\r\n            <h1>404</h1>\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { routes } from \"../../router/routes\";\r\nimport { Profile } from \"../../pages/Profile/Profile\";\r\nimport { Login } from \"../../pages/Login/Login\";\r\nimport { Registration } from \"../../pages/Registration/Registration\";\r\nimport { PasswordRecover } from \"../../pages/PasswordRecover/PasswordRecover\";\r\nimport { NewPassword } from \"../../pages/NewPassword/NewPassword\";\r\nimport { PresentationPage } from \"../../pages/PresenatationPage/PresentationPage\";\r\nimport { NotFound } from \"../../pages/404/404\";\r\n\r\nconst MainContentWrap = styled.div`\r\n    padding: 25px 15px;\r\n    grid-area: content;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <MainContentWrap>\r\n            <Switch>\r\n                <Route exact path={routes.profile} render={() => <Profile />} />\r\n                <Route exact path={routes.login} render={() => <Login />} />\r\n                <Route exact path={routes.registration} render={() => <Registration />} />\r\n                <Route exact path={routes.passwordRecover} render={() => <PasswordRecover />} />\r\n                <Route exact path={routes.newPassword} render={() => <NewPassword />} />\r\n                <Route exact path={routes.presentation} render={() => <PresentationPage />} />\r\n                <Route render={() => <NotFound />} />\r\n            </Switch>\r\n        </MainContentWrap>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components/macro\";\r\nimport { Button } from \"../common/Button/Button\";\r\nimport { useAppDispatch, useAppSelector } from \"../../store/hooks\";\r\nimport { logout } from \"../../pages/Login/loginReducer\";\r\nimport { routes } from \"../../router/routes\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const Header = () => {\r\n    const isLoggedIn = useAppSelector((state) => state.login.isLoggedIn);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const onLogOutBtnClick = () => {\r\n        dispatch(logout());\r\n    };\r\n\r\n    return (\r\n        <HeaderWrap>\r\n            {isLoggedIn ? (\r\n                <Button onClick={onLogOutBtnClick}>Logout</Button>\r\n            ) : (\r\n                <NavLink to={routes.login}>\r\n                    <Button onClick={onLogOutBtnClick}>Login</Button>\r\n                </NavLink>\r\n            )}\r\n        </HeaderWrap>\r\n    );\r\n};\r\n\r\n// Styles\r\nconst HeaderWrap = styled.div`\r\n    padding: 15px;\r\n    grid-area: header;\r\n    display: grid;\r\n    grid-template-columns: 10fr 1fr;\r\n    background-color: #0000ff91;\r\n\r\n    & Button {\r\n        width: 100%;\r\n    }\r\n\r\n    & Button,\r\n    a {\r\n        grid-column-start: 2;\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components/macro\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { routes } from \"../../router/routes\";\r\n\r\nexport const Navigation = (props: any) => {\r\n    return (\r\n        <NavigationWrap>\r\n            <h1>Navigation</h1>\r\n            <LinksList>\r\n                <NavLink to={routes.profile}>Profile</NavLink>\r\n                <NavLink to={routes.registration}>Registration</NavLink>\r\n                <NavLink to={routes.passwordRecover}>Password Recover</NavLink>\r\n                <NavLink to={routes.newPassword}>New Password</NavLink>\r\n                <NavLink to={routes.presentation}>Presentation</NavLink>\r\n            </LinksList>\r\n        </NavigationWrap>\r\n    );\r\n};\r\n\r\n// styles\r\nconst NavigationWrap = styled.div`\r\n    grid-area: navigation;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background-color: #ff9800;\r\n`;\r\n\r\nconst LinksList = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: flex-end;\r\n    flex-flow: column nowrap;\r\n\r\n    a {\r\n        margin-bottom: 10px;\r\n        color: blue;\r\n\r\n        &:last-child {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n`;\r\n","import React, { useEffect } from \"react\";\r\nimport { Main } from \"../components/Main/Main\";\r\nimport { Header } from \"../components/Header/Header\";\r\nimport { Navigation } from \"../components/Navigation/Navigation\";\r\nimport styled from \"styled-components\";\r\nimport { useAppDispatch } from \"../store/hooks\";\r\nimport { authMe } from \"./AppReducer\";\r\n\r\nfunction App() {\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div>\r\n            <MainWrapper>\r\n                <Header />\r\n                <Navigation />\r\n                <Main />\r\n            </MainWrapper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n// Styles\r\nconst MainWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 15% 1fr 1fr 1fr;\r\n    grid-template-rows: auto;\r\n    grid-template-areas:\r\n        \"header header header header\"\r\n        \"navigation content content content\"\r\n        \"navigation content content content\";\r\n`;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport type InitialStateT = any;\r\n\r\nexport const initialState: InitialStateT = {};\r\n\r\nconst newPassSlice = createSlice({\r\n    name: \"newPassword\",\r\n    initialState,\r\n    reducers: {}\r\n});\r\n\r\nexport const newPasswordReducer = newPassSlice.reducer;\r\n\r\n// * Action creators\r\nexport const {} = newPassSlice.actions;\r\n\r\n// * Thunks Creators\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport type InitialStateT = any;\r\n\r\nexport const initialState: InitialStateT = {};\r\n\r\nconst profileSlice = createSlice({\r\n    name: \"profile\",\r\n    initialState,\r\n    reducers: {}\r\n});\r\n\r\nexport const profileReducer = profileSlice.reducer;\r\n\r\n// * Action creators\r\n\r\nexport const {} = profileSlice.actions;\r\n\r\n// * Thunks Creators\r\n","import { combineReducers, Action } from \"redux\";\r\nimport thunk, { ThunkAction } from \"redux-thunk\";\r\nimport { loginReducer } from \"../pages/Login/loginReducer\";\r\nimport { newPasswordReducer } from \"../pages/NewPassword/newPasswordReducer\";\r\nimport { passwordRecoverReducer } from \"../pages/PasswordRecover/passwordRecoverReducer\";\r\nimport { profileReducer } from \"../pages/Profile/profileReducer\";\r\nimport { registrationReducer } from \"../pages/Registration/registrationReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport {appReducer} from \"../App/AppReducer\";\r\n\r\nexport type AppRootStateT = ReturnType<typeof rootReducer>;\r\n/*\r\n * In a AppThunkT  is a action or actions what you want to use\r\n * Each reducer has it own actions\r\n * */\r\nexport type AppThunkT<A extends Action> = ThunkAction<void, AppRootStateT, unknown, A>;\r\nexport type AppDispatchT = typeof store.dispatch;\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    newPassword: newPasswordReducer,\r\n    passwordRecover: passwordRecoverReducer,\r\n    profile: profileReducer,\r\n    registration: registrationReducer\r\n});\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n});\r\n","import { darken, lighten } from \"polished\";\r\n\r\nexport type ThemeType = typeof theme;\r\n\r\nconst primaryColor = '#4579db'\r\nconst secondaryColor = '#dbb145'\r\n\r\nexport const theme = {\r\n    variable: {\r\n        headerHeight: '120px'\r\n    },\r\n    color: {\r\n        primary: {\r\n            main: primaryColor,\r\n            light: `${lighten(0.1, primaryColor)}`,\r\n            dark: `${darken(0.1, primaryColor)}`\r\n        },\r\n        secondary: {\r\n            main: secondaryColor,\r\n            light: `${lighten(0.1, secondaryColor)}`,\r\n            dark: `${darken(0.1, secondaryColor)}`\r\n        },\r\n        grey: {\r\n            100: '#f5f5f5',\r\n            200: '#eeeeee',\r\n            300: '#e0e0e0',\r\n            400: '#bdbdbd',\r\n            500: '#9e9e9e',\r\n            600: '#757575',\r\n            700: '#616161',\r\n            800: '#424242',\r\n            900: '#212121',\r\n        },\r\n        black: '#1a1a1a',\r\n        white: '#e9e9e9',\r\n        error: '#db4545',\r\n    },\r\n    font: {\r\n        source: `https://fonts.googleapis.com/css2?family=Montserrat:wght@600&family=Roboto&display=swap`,\r\n        family: {\r\n            default: `'Roboto', sans-serif;`,\r\n            montserrat: `'Montserrat', sans-serif;`\r\n        },\r\n        size: {\r\n            s3: '0.512rem', // 8.19px\r\n            s2: '0.64rem', // 10.24px\r\n            s1: '0.8rem', // 12.80px\r\n            default: '16px', // https://type-scale.com/ - Major third\r\n            b1: '1.25rem', // 20.00px\r\n            b2: '1.563rem', // 25.00px\r\n            b3: '1.953rem', // 31.25px\r\n            b4: '2.441rem', // 39.06px\r\n            b5: '3.052rem' // 48.83px\r\n        }\r\n    },\r\n    shadow: {\r\n        0: 'none',\r\n        1: '2px 2px 5px rgba(0,0,0,0.2)',\r\n        2: '2px 2px 6px rgba(0,0,0,0.2)',\r\n        3: '2px 2px 7px rgba(0,0,0,0.2)',\r\n    },\r\n    effect: {\r\n        glow: `drop-shadow(0px 0px 5px ${primaryColor})`\r\n    },\r\n    mediaQuery: {\r\n        mobileS: '320px',\r\n        mobileM: '375px',\r\n        mobileL: '425px',\r\n        tablet: '768px',\r\n        laptop: '1024px',\r\n        laptopL: '1440px',\r\n        fourK: '2560px',\r\n    }\r\n};","import { createGlobalStyle } from \"styled-components/macro\";\r\nimport { ThemeType } from \"./theme\";\r\n\r\nexport const GlobalStyles = createGlobalStyle<{ theme: ThemeType }>`\r\n  // Import the font link into the project\r\n  @import url('${({ theme }) => theme.font.source}');\r\n\r\n  *,\r\n  *::after,\r\n  *::before {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  *:focus {\r\n    outline: none;\r\n  }\r\n\r\n  *::selection {\r\n  }\r\n\r\n  html,\r\n  body {\r\n    height: 100%;\r\n  }\r\n\r\n  html {\r\n    scroll-behavior: smooth;\r\n  }\r\n\r\n  h1 {\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n\r\n  body {\r\n    font-family: ${({ theme }) => theme.font.family.default}; // Make a default font actually default\r\n    font-size: ${({ theme }) => theme.font.size.default}; // Default font size\r\n    font-weight: 500;\r\n    color: #000;\r\n  }\r\n\r\n  ul,\r\n  li {\r\n    list-style: none;\r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n\r\n  img {\r\n    max-width: 100%;\r\n    height: auto;\r\n    display: block;\r\n  }\r\n\r\n  button,\r\n  input {\r\n    outline: none;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n\r\n  textarea {\r\n    resize: none;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store/store\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme } from \"./styles/theme\";\r\nimport { GlobalStyles } from \"./styles/GlobalStyles\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n                <GlobalStyles />\r\n                <HashRouter>\r\n                    <App />\r\n                </HashRouter>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}